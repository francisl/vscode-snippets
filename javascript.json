{
/*
	 // Place your snippets for Javascript (Babel) here. Each snippet is defined under a snippet name and has a prefix, body and
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

	// ****************
	// ES5
	"Object Function": {
		"prefix": "funo",
		"body": [
			"${1:name}: function($2) {",
			"\t$4",
			"},"
		],
		"description": "Create object function/method"
	},

	// ****************
	// ES6+
	"Class": {
		"prefix": "cls",
		"body": [
			"export class ${1:name} ${2:extends} {",
				"\tconstructor() {",
					"\t\tsuper();",
				"\t}\n",
				"\t${3:methodX}() {",
				"\t\treturn ${4:null};",
				"\t}",
			"}\n"
		],
		"description": "ES6 Class"
	},
	"Functions - create async": {
		"prefix": "asyncfun",
		"body": [
			"async function ${1}(${2}) {",
			"\tconst result = await ${3}(${4})",
			"}"
		],
		"description": "Create an async function"
	},
	"Functions - create generator": {
		"prefix": "generator",
		"body": [
			"function* ${1}(${2}) {",
			"\t${3}",
			"};"
		],
		"description": "Create an generator function"
	},
	"Anonymous Functions - arrow => returnValue": {
		"prefix": "funa>",
		"body": [
			"(${1}) => ${2}"
		],
		"description": "anonymous arrow function"
	},
	"Anonymous Functions - arrow => {}": {
		"prefix": "funa{",
		"body": [
			"(${1}) => {",
			"\treturn ${2};",
			"}"
		],
		"description": "anonymous arrow function"
	},
	"Anonymous Functions - arrow": {
		"prefix": "funa)",
		"body": [
			"(${1}) => (",
			"\t${2}",
			")"
		],
		"description": "anonymous arrow function"
	},
	"Functions - () => {}": {
		"prefix": "fun>",
		"body": [
			"(${1}) => {",
			"\treturn ${2};",
			"};"
		],
		"description": "Arrow function scoped"
	},
	"Functions - () => ()": {
		"prefix": "fun)",
		"body": [
			"const ${1} = (${2}) => (",
			"\t${3}",
			");"
		],
		"description": "Arrow function ()"
	},
	// ****************
	// UTILS
	"console log": {
		"prefix": "c.log",
		"body": [
			"console.log(${1})"
		],
		"description": ""
	},
	"Ojbect Maps": {
		"prefix": "objmap",
		"body": [
			"Object.keys(${1:object}).map((key, index) => {",
				"\treturn ${1}[key];",
			 "});"
		],
		"description": ""
	},
	// ****************
	// React
	"React Component Class": {
		"prefix": "reclass",
		"body": [
			"class ${1:name} extends React.Component {",
				"\trender() {",
				"\t\treturn (${2:<div></div>})",
				"\t}",
			"}\n",
			"${1}.propTypes = {",
				"\t${4}",
			"};\n",
			"export default ${1};"
		],
		"description": "React Component Class"
	},
	"React Functional Components - New file": {
		"prefix": "refunc+f",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"",
			"const propTypes = {",
				"\t${4}",
			"};",
			"",
			"export const ${TM_FILENAME/(\\-)([\\w+])(\\w+)(\\.\\w+)/${2:/upcase}${3}/} = (props${2}) => {",
			"\treturn (",
			"\t\t${3:<h1></h1>}",
			"\t);",
			"};"
		],
		"description": "Create new react component file"
	},
	"React Functional Component": {
		"prefix": "refunc",
		"body": [
			"export const ${1:name} = (props${2}) => {",
			"\treturn (",
			"\t\t${3:<h1></h1>}",
			"\t);",
			"};"
		],
		"description": "Create new react component file"
	},
	"React Props": {
		"prefix": "reprops",
		"body": [
			"const propTypes = {",
				"\t${1}: ${2}",
			"};"
		],
		"Create PropTypes object"
	},
	// ****************
	//// TESTS
	// Jest
	"Describe": {
		"prefix": "desc",
		"body": [
			"describe('${1}, () => {",
				"\tit('${2}', () => {",
					"\t\t${3}",
				"\t});",
			"});"
		],
		"description": ""
	},
	"Jest new test file": {
		"prefix": "jest+f",
		"body": [
			"import { call, put } from 'redux-saga/effets';\n\n",
			"describe('${1}', () => {",
				"\tit('${2}', () => {",
					"\t\t${3}",
				"\t});",
			"});"
		],
		"description": ""
	},
	"Jest Saga new test": {
		"prefix": "jestitsaga",
		"body": [
			"\tit('${2}', () => {",
				"\t\t${3}",
				"\t\tconst gen = ${3:FUNCTION_TO_TEST}();",
				"\t\tconst dismissAllAlertsAction = gen.next();",
				"\t\texpect(dismissAllAlertsAction.value.PUT).toEqual({",
					"\t\t\taction: {",
						"\t\t\t\ttype: 'DISMISS_ALL_ALERTS'",
					"\t\t\t},",
					"\t\t\tchannel: null",
				"\t\t});",
			"\t});"
		],
		"description": "Create Jest Saga test"
	},
}

